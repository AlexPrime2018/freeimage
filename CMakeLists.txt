cmake_minimum_required(VERSION 2.8.0)

# FreeImage version
SET( FREEIMAGE_VERSION_MAIN 3)
SET( FREEIMAGE_VERSION_MIDDLE 16)
SET( FREEIMAGE_VERSION_LOWER 0)
SET( FREEIMAGE_VERSION_MINOR 0)
SET( FREEIMAGE_VERSION ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER} )
SET( FREEIMAGE_VERSION_BUILD ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER}.${FREEIMAGE_VERSION_MINOR} )


OPTION(ENABLE_JPEG "Enable JPEG support" 0)

OPTION(FREEIMAGE_DYNAMIC_C_RUNTIME "If ON build FreeImage with dynamicly linked C/C++ runtime. If OFF FreeImage is staticly linked with C/C++ runtime.")

IF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)
# Set to link staticly with runtime
set(CMAKE_USER_MAKE_RULES_OVERRIDE
   ${CMAKE_CURRENT_SOURCE_DIR}/c_flag_overrides.cmake)
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX
   ${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake)
ENDIF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)

project (FreeImage)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

# Check parameters
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# Find packages
FIND_PACKAGE(ZLIB REQUIRED)
SET(LIBS ${ZLIB_LIBRARIES})

# Set default output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set libraries for static or DLL build
IF(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_BUILD_FLAGS -DFREEIMAGE_LIB)
ELSE(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_LIBRARIES FreeImage)
  SET(FREEIMAGE_BUILD_DLL ON)
ENDIF(FREEIMAGE_BUILD_STATIC)

SET(FREEIMAGE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Source)
SET(FREEIMAGE_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/Lib)

add_subdirectory(Source)
#add_subdirectory(TestAPI)
